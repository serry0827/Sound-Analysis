
import numpy as np
from scipy.fft import fft, rfft
from scipy.fft import fftfreq, rfftfreq
import plotly.graph_objs as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import pandas as pd

#import data from excell


# Plot the signal
plt.plot(signal_1hz.time_axis, signal, 'b')
plt.xlabel('Time [sec]')
plt.ylabel('Amplitude [dB]')
plt.title('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
plt.show()

# Apply the FFT on the signal
fourier = fft(signal)

# Plot the result (the spectrum |Xk|)
plt.plot(np.abs(fourier))
plt.show()

# Calculate N/2 to normalize the FFT output
N = len(signal)
normalize = N/2

##The figure above should represent the frequency spectrum of the signal.
# Notice that the x-axis is the number of samples 
# (instead of the frequency components) 
# and the y-axis should represent the amplitudes of the sinusoids.
# To get the actual amplitudes of the spectrum, 
# we have to normalize the output of (fft) by N/2 the number of samples.

# Plot the normalized FFT (|Xk|)/(N/2)
plt.plot(np.abs(fourier)/normalize)
plt.ylabel('Amplitude')
plt.xlabel('Samples')
plt.title('Normalized FFT Spectrum')
plt.show()

##To get the frequency components (x-axis), you can use (fftfreq) from the scipy package. 
# This method needs the number of samples (N) and the sampling rate as input arguments. 
# And it returns a frequency axis with N frequency components [5].

# Get the frequency components of the spectrum
sampling_rate = 200.0 # It's used as a sample spacing
frequency_axis = fftfreq(N, d=1.0/sampling_rate)
norm_amplitude = np.abs(fourier)/normalize
# Plot the results
plt.plot(frequency_axis, norm_amplitude)
plt.xlabel('Frequency[Hz]')
plt.ylabel('Amplitude')
plt.title('Spectrum')
plt.show()

# Plot the frequency axis for more explanation
plt.plot(frequency_axis)
plt.ylabel('Frequency[Hz]')
plt.title('Frequency Axis')
plt.show()